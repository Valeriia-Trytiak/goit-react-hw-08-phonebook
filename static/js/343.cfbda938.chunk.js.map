{"version":3,"file":"static/js/343.cfbda938.chunk.js","mappings":"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","sources":["components/ContainerLoader/ContainerLoader.js","components/LoginForm/LoginForm.styled.js","components/LoginForm/LoginForm.jsx","pages/Login.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContainerLoader = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n`;\n","import styled from 'styled-components';\nimport { Form, ErrorMessage, Field } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  position: relative;\n  width: 250px;\n  margin: ${p => p.theme.spacing(10)} auto 0;\n  background: ${p => p.theme.colors.accent};\n  border-radius: ${p => p.theme.spacing(8)};\n\n  @media only screen and (min-width: 768px) {\n    width: 400px;\n  }\n`;\n\nexport const StyledInput = styled(Field)`\n  display: block;\n  width: 100%;\n  padding: 0 ${p => p.theme.spacing(5)};\n  margin-bottom: ${p => p.theme.spacing(2)};\n  line-height: ${p => p.theme.spacing(10)};\n  border-width: 0;\n  border-radius: ${p => p.theme.spacing(5)};\n\n  &:focus,\n  :hover {\n    background-color: ${p => p.theme.colors.bgInput};\n  }\n`;\n\nexport const FormInner = styled.div`\n  padding: ${p => p.theme.spacing(12)};\n`;\n\nexport const ButtonSubmit = styled.button`\n  text-decoration: none;\n  display: block;\n  margin: 0 auto;\n  margin-top: ${p => p.theme.spacing(8)};\n  width: 150px;\n  height: 40px;\n  border-radius: ${p => p.theme.spacing(5)};\n  font-family: inherit;\n  font-size: 11px;\n  text-transform: uppercase;\n  text-align: center;\n  letter-spacing: 3px;\n  font-weight: 600;\n  border-color: ${p => p.theme.colors.grey};\n  background: transparent;\n  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);\n  transition: 0.3s;\n  cursor: pointer;\n\n  &:focus,\n  &:hover {\n    background-color: ${p => p.theme.colors.grey};\n    box-shadow: 0 15px 20px rgba(0, 128, 128, 0.4);\n    color: ${p => p.theme.colors.white};\n    transform: translateY(-7px);\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  color: ${p => p.theme.colors.error};\n  font-size: 14px;\n  display: block;\n`;\n\nexport const Circle = styled.div`\n  position: absolute;\n  bottom: 80px;\n  left: -55px;\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: ${p => p.theme.colors.accent};\n`;\n\nexport const LeftDecoration = styled.div`\n  content: '';\n  position: absolute;\n  bottom: 60px;\n  left: -30px;\n  width: 50px;\n  height: 20px;\n  background: ${p => p.theme.colors.accent};\n  border-radius: ${p => p.theme.spacing(5)};\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    width: 50px;\n    height: 20px;\n    border-radius: ${p => p.theme.spacing(8)};\n  }\n\n  &::before {\n    top: -20px;\n    background-color: rgb(162, 221, 228);\n  }\n\n  &::after {\n    top: 20px;\n    left: 10px;\n    background-color: rgb(152, 216, 225);\n  }\n`;\n\nexport const RightDecoration = styled.div`\n  content: '';\n  position: absolute;\n  top: 60px;\n  right: -30px;\n  width: 50px;\n  height: 20px;\n  background: ${p => p.theme.colors.accent};\n  border-radius: ${p => p.theme.spacing(5)};\n\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    width: 50px;\n    height: 20px;\n    border-radius: ${p => p.theme.spacing(8)};\n    background: ${p => p.theme.colors.white};\n  }\n\n  &::before {\n    top: -20px;\n    right: 0;\n    background-color: rgb(210, 238, 242);\n  }\n\n  &::after {\n    top: 20px;\n    right: 10px;\n    background-color: rgb(196, 233, 238);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  FormInner,\n  LeftDecoration,\n  RightDecoration,\n  Circle,\n  StyledInput,\n  StyledForm,\n  ButtonSubmit,\n  Error,\n} from './LoginForm.styled';\nimport { logIn } from 'redux/auth/operations';\n\n// min 5 characters, 1 upper case letter, 1 lower case letter, 1 numeric digit.\n\nconst ContactShema = Yup.object().shape({\n  email: Yup.string()\n    .email('Invalid email address')\n    .required('This is a required field'),\n  password: Yup.string().required('This is a required field'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = (values, actions) => {\n    dispatch(logIn(values));\n    actions.resetForm({ email: '', password: '' });\n    Notify.success(`Authorization completed`);\n  };\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      onSubmit={(values, actions) => {\n        handleSubmit(values, actions);\n      }}\n      validationSchema={ContactShema}\n    >\n      <StyledForm autoComplete=\"off\">\n        <LeftDecoration></LeftDecoration>\n        <RightDecoration></RightDecoration>\n        <Circle></Circle>\n        <FormInner>\n          <label>\n            Email\n            <StyledInput name=\"email\" type=\"email\" />\n            <Error name=\"email\" component=\"span\" />\n          </label>\n          <label>\n            Password\n            <StyledInput name=\"password\" type=\"password\" />\n            <Error name=\"password\" component=\"span\" />\n          </label>\n          <ButtonSubmit type=\"submit\">Log In</ButtonSubmit>\n        </FormInner>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { useSelector } from 'react-redux';\nimport { LoginForm } from 'components/LoginForm/LoginForm';\nimport { ContainerLoader } from 'components/ContainerLoader/ContainerLoader';\nimport { ColorRing } from 'react-loader-spinner';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\n\nexport default function Login() {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  return (\n    <div>\n      <Helmet>\n        <title>Login</title>\n      </Helmet>\n      <LoginForm />\n      {isLoading && (\n        <ContainerLoader>\n          <ColorRing\n            visible={true}\n            height=\"80\"\n            width=\"80\"\n            ariaLabel=\"blocks-loading\"\n            colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n          />\n        </ContainerLoader>\n      )}\n      {error && <span>Whoops... Error! Please, reload this page!</span>}\n    </div>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n"],"names":["ContainerLoader","styled","_templateObject","_taggedTemplateLiteral","StyledForm","Form","p","theme","spacing","colors","accent","StyledInput","Field","_templateObject2","bgInput","FormInner","_templateObject3","ButtonSubmit","_templateObject4","grey","white","Error","ErrorMessage","_templateObject5","error","Circle","_templateObject6","LeftDecoration","_templateObject7","RightDecoration","_templateObject8","ContactShema","Yup","shape","email","required","password","LoginForm","dispatch","useDispatch","_jsx","Formik","initialValues","onSubmit","values","actions","handleSubmit","logIn","resetForm","Notify","validationSchema","children","_jsxs","autoComplete","name","type","component","Login","isLoading","useSelector","selectIsLoading","selectError","Helmet","ColorRing","visible","height","width","ariaLabel","selectContacts","state","contacts","items","selectFilter","filter","selectVisibleContacts","createSelector","contact","toLowerCase","includes"],"sourceRoot":""}